(function(e,t){if("function"==typeof define&&define.amd)define(["exports"],t);else if("undefined"!=typeof exports)t(exports);else{var _={exports:{}};t(_.exports),e.unknown=_.exports}})(this,function(e){"use strict";function t(e,t){for(var _,o=0;o<t.length;o++)_=t[o],_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(e,_.key,_)}function _(e,_,o){return _&&t(e.prototype,_),o&&t(e,o),e}function o(e,t){if(!r(e,t))throw new TypeError("Cannot call a class as a function")}function n(e,t,_,o,n,a,r){try{var i=e[a](r),s=i.value}catch(e){return void _(e)}i.done?t(s):Promise.resolve(s).then(o,n)}function a(e){return function(){var t=this,_=arguments;return new Promise(function(o,a){function r(e){n(s,o,a,r,i,"next",e)}function i(e){n(s,o,a,r,i,"throw",e)}var s=e.apply(t,_);r(void 0)})}}function r(e,t){return null!=t&&"undefined"!=typeof Symbol&&t[Symbol.hasInstance]?t[Symbol.hasInstance](e):e instanceof t}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0,!function(e){function t(e,t,_,n){var a=t&&r(t.prototype,o)?t:o,i=Object.create(a.prototype),s=new L(n||[]);return i._invoke=O(e,_,s),i}function _(e,t,_){try{return{type:"normal",arg:e.call(t,_)}}catch(e){return{type:"throw",arg:e}}}function o(){}function n(){}function a(){}function s(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function d(e){function t(o,n,a,r){var s=_(e[o],e,n);if("throw"===s.type)r(s.arg);else{var d=s.arg,O=d.value;return O&&"object"===i(O)&&p.call(O,"__await")?Promise.resolve(O.__await).then(function(e){t("next",e,a,r)},function(e){t("throw",e,a,r)}):Promise.resolve(O).then(function(e){d.value=e,a(d)},function(e){return t("throw",e,a,r)})}}function o(e,_){function o(){return new Promise(function(o,n){t(e,_,o,n)})}return n=n?n.then(o,o):o()}var n;this._invoke=o}function O(e,t,o){var n="suspendedStart";return function(a,r){if(n==="executing")throw new Error("Generator is already running");if("completed"===n){if("throw"===a)throw r;return C()}for(o.method=a,o.arg=r;;){var i=o.delegate;if(i){var s=l(i,o);if(s){if(s===g)continue;return s}}if("next"===o.method)o.sent=o._sent=o.arg;else if("throw"===o.method){if("suspendedStart"===n)throw n="completed",o.arg;o.dispatchException(o.arg)}else"return"===o.method&&o.abrupt("return",o.arg);n="executing";var d=_(e,t,o);if("normal"===d.type){if(n=o.done?"completed":"suspendedYield",d.arg===g)continue;return{value:d.arg,done:o.done}}"throw"===d.type&&(n="completed",o.method="throw",o.arg=d.arg)}}}function l(e,t){var o=e.iterator[t.method];if(void 0===o){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,l(e,t),"throw"===t.method))return g;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var n=_(o,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,g;var a=n.arg;if(!a)return t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,g;if(a.done)t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0);else return a;return t.delegate=null,g}function c(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function K(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(c,this),this.reset(!0)}function u(e){if(e){var t=e[B];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var _=-1,o=function t(){for(;++_<e.length;)if(p.call(e,_))return t.value=e[_],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:C}}function C(){return{value:void 0,done:!0}}var y=Object.prototype,p=y.hasOwnProperty,R="function"==typeof Symbol?Symbol:{},B=R.iterator||"@@iterator",h=R.asyncIterator||"@@asyncIterator",f=R.toStringTag||"@@toStringTag",W="object"===("undefined"==typeof module?"undefined":i(module)),m=e.regeneratorRuntime;if(m)return void(W&&(module.exports=m));m=e.regeneratorRuntime=W?module.exports||{}:{},m.wrap=t;var g={},b={};b[B]=function(){return this};var k=Object.getPrototypeOf,w=k&&k(k(u([])));w&&w!==y&&p.call(w,B)&&(b=w);var A=a.prototype=o.prototype=Object.create(b);n.prototype=A.constructor=a,a.constructor=n,a[f]=n.displayName="GeneratorFunction",m.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===n||"GeneratorFunction"===(t.displayName||t.name))},m.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,a):(e.__proto__=a,!(f in e)&&(e[f]="GeneratorFunction")),e.prototype=Object.create(A),e},m.awrap=function(e){return{__await:e}},s(d.prototype),d.prototype[h]=function(){return this},m.AsyncIterator=d,m.async=function(e,_,o,n){var a=new d(t(e,_,o,n));return m.isGeneratorFunction(_)?a:a.next().then(function(e){return e.done?e.value:a.next()})},s(A),A[f]="Generator",A[B]=function(){return this},A.toString=function(){return"[object Generator]"},m.keys=function(e){var t=[];for(var _ in e)t.push(_);return t.reverse(),function _(){for(;t.length;){var o=t.pop();if(o in e)return _.value=o,_.done=!1,_}return _.done=!0,_}},m.values=u,L.prototype={constructor:L,reset:function _(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(K),!e)for(var t in this)"t"===t.charAt(0)&&p.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function _(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function d(e){function t(t,o){return a.type="throw",a.arg=e,_.next=t,o&&(_.method="next",_.arg=void 0),!!o}if(this.done)throw e;for(var _=this,o=this.tryEntries.length-1;0<=o;--o){var n=this.tryEntries[o],a=n.completion;if("root"===n.tryLoc)return t("end");if(n.tryLoc<=this.prev){var r=p.call(n,"catchLoc"),s=p.call(n,"finallyLoc");if(r&&s){if(this.prev<n.catchLoc)return t(n.catchLoc,!0);if(this.prev<n.finallyLoc)return t(n.finallyLoc)}else if(r){if(this.prev<n.catchLoc)return t(n.catchLoc,!0);}else if(!s)throw new Error("try statement without catch or finally");else if(this.prev<n.finallyLoc)return t(n.finallyLoc)}}},abrupt:function r(e,t){for(var _,o=this.tryEntries.length-1;0<=o;--o)if(_=this.tryEntries[o],_.tryLoc<=this.prev&&p.call(_,"finallyLoc")&&this.prev<_.finallyLoc){var n=_;break}n&&("break"===e||"continue"===e)&&n.tryLoc<=t&&t<=n.finallyLoc&&(n=null);var a=n?n.completion:{};return a.type=e,a.arg=t,n?(this.method="next",this.next=n.finallyLoc,g):this.complete(a)},complete:function _(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function o(e){for(var t,_=this.tryEntries.length-1;0<=_;--_)if(t=this.tryEntries[_],t.finallyLoc===e)return this.complete(t.completion,t.afterLoc),K(t),g},catch:function a(e){for(var t,_=this.tryEntries.length-1;0<=_;--_)if(t=this.tryEntries[_],t.tryLoc===e){var o=t.completion;if("throw"===o.type){var n=o.arg;K(t)}return n}throw new Error("illegal catch attempt")},delegateYield:function o(e,t,_){return this.delegate={iterator:u(e),resultName:t,nextLoc:_},"next"===this.method&&(this.arg=void 0),g}}}(function(){return this||"object"===("undefined"==typeof self?"undefined":i(self))&&self}()||Function("return this")());var s=function(){var e=a(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop();}},e)}));return function(){return e.apply(this,arguments)}}(),d={zh:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},de:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},es:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},fr:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},id:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},ja:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},"ja-jph":{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},ko:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},pl:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},uk:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},"zh-hant":{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},nl:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},it:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},hr:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},ru:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},pt:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},fi:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},tr:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},tk:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"},en:{ext_keypadfr:"Keypad_FR",extensionName:"Keypad_FR",extensionDescription:"",BLOCK_1682531530376_ROW1_0:"0",BLOCK_1682531530376_ROW1_1:"1",BLOCK_1682531530376_ROW1_2:"2",BLOCK_1682531530376_ROW1_3:"3",BLOCK_1682531530376_ROW1_4:"4",BLOCK_1682531530376_ROW1_5:"5",BLOCK_1682531530376_ROW1_6:"6",BLOCK_1682531530376_ROW1_7:"7",BLOCK_1682531530376_ROW1_8:"8",BLOCK_1682531530376_ROW1_9:"9",BLOCK_1682531530376_ROW1_10:"10",BLOCK_1682531530376_ROW1_11:"11",BLOCK_1682531530376_ROW1_12:"12",BLOCK_1682531530376_ROW1_13:"13",BLOCK_1682531530376_ROW1_14:"A0",BLOCK_1682531530376_ROW1_15:"A1",BLOCK_1682531530376_ROW1_16:"A2",BLOCK_1682531530376_ROW1_17:"A3",BLOCK_1682531530376_ROW1_18:"A4",BLOCK_1682531530376_ROW1_19:"A5",BLOCK_1682531530376:"Ligne [row1] [row2] [row3] [row4] Colonne [col1] [col2] [col3] [col4] ",BLOCK_1682531926651:"Lire [toRead] chiffre(s)",BLOCK_1682531968675:"Chiffre(s) lu(s)",cate_15c32fb2:"Keypad_FR"}},O={arduinoc:{}},l=[{lang:"arduinoc",template:"// generated by mBlock5 for <your product>\n// codes make you happy\n\n//( include //)\n#include <Arduino.h>\n//( lib //)\n\n//({\n    this.$ALL_VARIABLES.length==0?'':this.$ALL_VARIABLES.map(v=>\"float \"+v+\" = 0;\").join('\\n')\n}//)\n\n//( declare //)\n\n\nvoid _delay(float seconds) {\n  long endTime = millis() + seconds * 1000;\n  while(millis() < endTime) _loop();\n}\n\n//(\nvoid setup() {\n  //( setup //)\n  //( code //)\n}\n//)\n\nvoid _loop() {\n  //( loop //)\n}\n\nvoid loop() {\n  _loop();\n}",splitor:{frame:{left:"//(",right:"//)"},expression:{left:"/*{",right:"}*/"}},reducers:[{name:"include",reduce:function d(e){var t=[],_=!0,o=!1,n=void 0;try{for(var a,r=e[Symbol.iterator]();!(_=(a=r.next()).done);_=!0){var i=a.value,s="";"string"==typeof i?s=i:"function"==typeof i&&(s=i()),-1===t.indexOf(s)&&t.push(s)}}catch(e){o=!0,n=e}finally{try{_||null==r.return||r.return()}finally{if(o)throw n}}return 0===t.length?void 0:t.map(function(e){return"#include "+e}).join("\n")+"\n"}}]}],c={arduino:[{filename:"Keypad-3.1.1/src/Key.cpp",code:"/*\n|| @file Key.cpp\n|| @version 1.0\n|| @author Mark Stanley\n|| @contact mstanley@technologist.com\n||\n|| @description\n|| | Key class provides an abstract definition of a key or button\n|| | and was initially designed to be used in conjunction with a\n|| | state-machine.\n|| #\n||\n|| @license\n|| | This library is free software; you can redistribute it and/or\n|| | modify it under the terms of the GNU Lesser General Public\n|| | License as published by the Free Software Foundation; version\n|| | 2.1 of the License.\n|| |\n|| | This library is distributed in the hope that it will be useful,\n|| | but WITHOUT ANY WARRANTY; without even the implied warranty of\n|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n|| | Lesser General Public License for more details.\n|| |\n|| | You should have received a copy of the GNU Lesser General Public\n|| | License along with this library; if not, write to the Free Software\n|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n|| #\n||\n*/\n#include <Key.h>\n\n\n// default constructor\nKey::Key() {\n\tkchar = NO_KEY;\n\tkstate = IDLE;\n\tstateChanged = false;\n}\n\n// constructor\nKey::Key(char userKeyChar) {\n\tkchar = userKeyChar;\n\tkcode = -1;\n\tkstate = IDLE;\n\tstateChanged = false;\n}\n\n\nvoid Key::key_update (char userKeyChar, KeyState userState, boolean userStatus) {\n\tkchar = userKeyChar;\n\tkstate = userState;\n\tstateChanged = userStatus;\n}\n\n\n\n/*\n|| @changelog\n|| | 1.0 2012-06-04 - Mark Stanley : Initial Release\n|| #\n*/\n"},{filename:"Keypad-3.1.1/src/Key.h",code:"/*\n||\n|| @file Key.h\n|| @version 1.0\n|| @author Mark Stanley\n|| @contact mstanley@technologist.com\n||\n|| @description\n|| | Key class provides an abstract definition of a key or button\n|| | and was initially designed to be used in conjunction with a\n|| | state-machine.\n|| #\n||\n|| @license\n|| | This library is free software; you can redistribute it and/or\n|| | modify it under the terms of the GNU Lesser General Public\n|| | License as published by the Free Software Foundation; version\n|| | 2.1 of the License.\n|| |\n|| | This library is distributed in the hope that it will be useful,\n|| | but WITHOUT ANY WARRANTY; without even the implied warranty of\n|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n|| | Lesser General Public License for more details.\n|| |\n|| | You should have received a copy of the GNU Lesser General Public\n|| | License along with this library; if not, write to the Free Software\n|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n|| #\n||\n*/\n\n#ifndef Keypadlib_KEY_H_\n#define Keypadlib_KEY_H_\n\n#include <Arduino.h>\n\n#define OPEN LOW\n#define CLOSED HIGH\n\ntypedef unsigned int uint;\ntypedef enum{ IDLE, PRESSED, HOLD, RELEASED } KeyState;\n\nconst char NO_KEY = '\\0';\n\nclass Key {\npublic:\n\t// members\n\tchar kchar;\n\tint kcode;\n\tKeyState kstate;\n\tboolean stateChanged;\n\n\t// methods\n\tKey();\n\tKey(char userKeyChar);\n\tvoid key_update(char userKeyChar, KeyState userState, boolean userStatus);\n\nprivate:\n\n};\n\n#endif\n\n/*\n|| @changelog\n|| | 1.0 2012-06-04 - Mark Stanley : Initial Release\n|| #\n*/\n"},{filename:"Keypad-3.1.1/src/Keypad.cpp",code:"/*\n||\n|| @file Keypad.cpp\n|| @version 3.1\n|| @author Mark Stanley, Alexander Brevig\n|| @contact mstanley@technologist.com, alexanderbrevig@gmail.com\n||\n|| @description\n|| | This library provides a simple interface for using matrix\n|| | keypads. It supports multiple keypresses while maintaining\n|| | backwards compatibility with the old single key library.\n|| | It also supports user selectable pins and definable keymaps.\n|| #\n||\n|| @license\n|| | This library is free software; you can redistribute it and/or\n|| | modify it under the terms of the GNU Lesser General Public\n|| | License as published by the Free Software Foundation; version\n|| | 2.1 of the License.\n|| |\n|| | This library is distributed in the hope that it will be useful,\n|| | but WITHOUT ANY WARRANTY; without even the implied warranty of\n|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n|| | Lesser General Public License for more details.\n|| |\n|| | You should have received a copy of the GNU Lesser General Public\n|| | License along with this library; if not, write to the Free Software\n|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n|| #\n||\n*/\n#include <Keypad.h>\n\n// <<constructor>> Allows custom keymap, pin configuration, and keypad sizes.\nKeypad::Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols) {\n\trowPins = row;\n\tcolumnPins = col;\n\tsizeKpd.rows = numRows;\n\tsizeKpd.columns = numCols;\n\n\tbegin(userKeymap);\n\n\tsetDebounceTime(10);\n\tsetHoldTime(500);\n\tkeypadEventListener = 0;\n\n\tstartTime = 0;\n\tsingle_key = false;\n}\n\n// Let the user define a keymap - assume the same row/column count as defined in constructor\nvoid Keypad::begin(char *userKeymap) {\n    keymap = userKeymap;\n}\n\n// Returns a single key only. Retained for backwards compatibility.\nchar Keypad::getKey() {\n\tsingle_key = true;\n\n\tif (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))\n\t\treturn key[0].kchar;\n\t\n\tsingle_key = false;\n\n\treturn NO_KEY;\n}\n\n// Populate the key list.\nbool Keypad::getKeys() {\n\tbool keyActivity = false;\n\n\t// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.\n\tif ( (millis()-startTime)>debounceTime ) {\n\t\tscanKeys();\n\t\tkeyActivity = updateList();\n\t\tstartTime = millis();\n\t}\n\n\treturn keyActivity;\n}\n\n// Private : Hardware scan\nvoid Keypad::scanKeys() {\n\t// Re-intialize the row pins. Allows sharing these pins with other hardware.\n\tfor (byte r=0; r<sizeKpd.rows; r++) {\n\t\tpin_mode(rowPins[r],INPUT_PULLUP);\n\t}\n\n\t// bitMap stores ALL the keys that are being pressed.\n\tfor (byte c=0; c<sizeKpd.columns; c++) {\n\t\tpin_mode(columnPins[c],OUTPUT);\n\t\tpin_write(columnPins[c], LOW);\t// Begin column pulse output.\n\t\tfor (byte r=0; r<sizeKpd.rows; r++) {\n\t\t\tbitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.\n\t\t}\n\t\t// Set pin to high impedance input. Effectively ends column pulse.\n\t\tpin_write(columnPins[c],HIGH);\n\t\tpin_mode(columnPins[c],INPUT);\n\t}\n}\n\n// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.\nbool Keypad::updateList() {\n\n\tbool anyActivity = false;\n\n\t// Delete any IDLE keys\n\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\tif (key[i].kstate==IDLE) {\n\t\t\tkey[i].kchar = NO_KEY;\n\t\t\tkey[i].kcode = -1;\n\t\t\tkey[i].stateChanged = false;\n\t\t}\n\t}\n\n\t// Add new keys to empty slots in the key list.\n\tfor (byte r=0; r<sizeKpd.rows; r++) {\n\t\tfor (byte c=0; c<sizeKpd.columns; c++) {\n\t\t\tboolean button = bitRead(bitMap[r],c);\n\t\t\tchar keyChar = keymap[r * sizeKpd.columns + c];\n\t\t\tint keyCode = r * sizeKpd.columns + c;\n\t\t\tint idx = findInList (keyCode);\n\t\t\t// Key is already on the list so set its next state.\n\t\t\tif (idx > -1)\t{\n\t\t\t\tnextKeyState(idx, button);\n\t\t\t}\n\t\t\t// Key is NOT on the list so add it.\n\t\t\tif ((idx == -1) && button) {\n\t\t\t\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\t\t\t\tif (key[i].kchar==NO_KEY) {\t\t// Find an empty slot or don't add key to list.\n\t\t\t\t\t\tkey[i].kchar = keyChar;\n\t\t\t\t\t\tkey[i].kcode = keyCode;\n\t\t\t\t\t\tkey[i].kstate = IDLE;\t\t// Keys NOT on the list have an initial state of IDLE.\n\t\t\t\t\t\tnextKeyState (i, button);\n\t\t\t\t\t\tbreak;\t// Don't fill all the empty slots with the same key.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Report if the user changed the state of any key.\n\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\tif (key[i].stateChanged) anyActivity = true;\n\t}\n\n\treturn anyActivity;\n}\n\n// Private\n// This function is a state machine but is also used for debouncing the keys.\nvoid Keypad::nextKeyState(byte idx, boolean button) {\n\tkey[idx].stateChanged = false;\n\n\tswitch (key[idx].kstate) {\n\t\tcase IDLE:\n\t\t\tif (button==CLOSED) {\n\t\t\t\ttransitionTo (idx, PRESSED);\n\t\t\t\tholdTimer = millis(); }\t\t// Get ready for next HOLD state.\n\t\t\tbreak;\n\t\tcase PRESSED:\n\t\t\tif ((millis()-holdTimer)>holdTime)\t// Waiting for a key HOLD...\n\t\t\t\ttransitionTo (idx, HOLD);\n\t\t\telse if (button==OPEN)\t\t\t\t// or for a key to be RELEASED.\n\t\t\t\ttransitionTo (idx, RELEASED);\n\t\t\tbreak;\n\t\tcase HOLD:\n\t\t\tif (button==OPEN)\n\t\t\t\ttransitionTo (idx, RELEASED);\n\t\t\tbreak;\n\t\tcase RELEASED:\n\t\t\ttransitionTo (idx, IDLE);\n\t\t\tbreak;\n\t}\n}\n\n// New in 2.1\nbool Keypad::isPressed(char keyChar) {\n\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\tif ( key[i].kchar == keyChar ) {\n\t\t\tif ( (key[i].kstate == PRESSED) && key[i].stateChanged )\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\t// Not pressed.\n}\n\n// Search by character for a key in the list of active keys.\n// Returns -1 if not found or the index into the list of active keys.\nint Keypad::findInList (char keyChar) {\n\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\tif (key[i].kchar == keyChar) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n// Search by code for a key in the list of active keys.\n// Returns -1 if not found or the index into the list of active keys.\nint Keypad::findInList (int keyCode) {\n\tfor (byte i=0; i<LIST_MAX; i++) {\n\t\tif (key[i].kcode == keyCode) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n// New in 2.0\nchar Keypad::waitForKey() {\n\tchar waitKey = NO_KEY;\n\twhile( (waitKey = getKey()) == NO_KEY );\t// Block everything while waiting for a keypress.\n\treturn waitKey;\n}\n\n// Backwards compatibility function.\nKeyState Keypad::getState() {\n\treturn key[0].kstate;\n}\n\n// The end user can test for any changes in state before deciding\n// if any variables, etc. needs to be updated in their code.\nbool Keypad::keyStateChanged() {\n\treturn key[0].stateChanged;\n}\n\n// The number of keys on the key list, key[LIST_MAX], equals the number\n// of bytes in the key list divided by the number of bytes in a Key object.\nbyte Keypad::numKeys() {\n\treturn sizeof(key)/sizeof(Key);\n}\n\n// Minimum debounceTime is 1 mS. Any lower *will* slow down the loop().\nvoid Keypad::setDebounceTime(uint debounce) {\n\tdebounce<1 ? debounceTime=1 : debounceTime=debounce;\n}\n\nvoid Keypad::setHoldTime(uint hold) {\n    holdTime = hold;\n}\n\nvoid Keypad::addEventListener(void (*listener)(char)){\n\tkeypadEventListener = listener;\n}\n\nvoid Keypad::transitionTo(byte idx, KeyState nextState) {\n\tkey[idx].kstate = nextState;\n\tkey[idx].stateChanged = true;\n\n\t// Sketch used the getKey() function.\n\t// Calls keypadEventListener only when the first key in slot 0 changes state.\n\tif (single_key)  {\n\t  \tif ( (keypadEventListener!=NULL) && (idx==0) )  {\n\t\t\tkeypadEventListener(key[0].kchar);\n\t\t}\n\t}\n\t// Sketch used the getKeys() function.\n\t// Calls keypadEventListener on any key that changes state.\n\telse {\n\t  \tif (keypadEventListener!=NULL)  {\n\t\t\tkeypadEventListener(key[idx].kchar);\n\t\t}\n\t}\n}\n\n/*\n|| @changelog\n|| | 3.1 2013-01-15 - Mark Stanley     : Fixed missing RELEASED & IDLE status when using a single key.\n|| | 3.0 2012-07-12 - Mark Stanley     : Made library multi-keypress by default. (Backwards compatible)\n|| | 3.0 2012-07-12 - Mark Stanley     : Modified pin functions to support Keypad_I2C\n|| | 3.0 2012-07-12 - Stanley & Young  : Removed static variables. Fix for multiple keypad objects.\n|| | 3.0 2012-07-12 - Mark Stanley     : Fixed bug that caused shorted pins when pressing multiple keys.\n|| | 2.0 2011-12-29 - Mark Stanley     : Added waitForKey().\n|| | 2.0 2011-12-23 - Mark Stanley     : Added the public function keyStateChanged().\n|| | 2.0 2011-12-23 - Mark Stanley     : Added the private function scanKeys().\n|| | 2.0 2011-12-23 - Mark Stanley     : Moved the Finite State Machine into the function getKeyState().\n|| | 2.0 2011-12-23 - Mark Stanley     : Removed the member variable lastUdate. Not needed after rewrite.\n|| | 1.8 2011-11-21 - Mark Stanley     : Added decision logic to compile WProgram.h or Arduino.h\n|| | 1.8 2009-07-08 - Alexander Brevig : No longer uses arrays\n|| | 1.7 2009-06-18 - Alexander Brevig : Every time a state changes the keypadEventListener will trigger, if set.\n|| | 1.7 2009-06-18 - Alexander Brevig : Added setDebounceTime. setHoldTime specifies the amount of\n|| |                                          microseconds before a HOLD state triggers\n|| | 1.7 2009-06-18 - Alexander Brevig : Added transitionTo\n|| | 1.6 2009-06-15 - Alexander Brevig : Added getState() and state variable\n|| | 1.5 2009-05-19 - Alexander Brevig : Added setHoldTime()\n|| | 1.4 2009-05-15 - Alexander Brevig : Added addEventListener\n|| | 1.3 2009-05-12 - Alexander Brevig : Added lastUdate, in order to do simple debouncing\n|| | 1.2 2009-05-09 - Alexander Brevig : Changed getKey()\n|| | 1.1 2009-04-28 - Alexander Brevig : Modified API, and made variables private\n|| | 1.0 2007-XX-XX - Mark Stanley : Initial Release\n|| #\n*/\n"},{filename:"Keypad-3.1.1/src/Keypad.h",code:"/*\n||\n|| @file Keypad.h\n|| @version 3.1\n|| @author Mark Stanley, Alexander Brevig\n|| @contact mstanley@technologist.com, alexanderbrevig@gmail.com\n||\n|| @description\n|| | This library provides a simple interface for using matrix\n|| | keypads. It supports multiple keypresses while maintaining\n|| | backwards compatibility with the old single key library.\n|| | It also supports user selectable pins and definable keymaps.\n|| #\n||\n|| @license\n|| | This library is free software; you can redistribute it and/or\n|| | modify it under the terms of the GNU Lesser General Public\n|| | License as published by the Free Software Foundation; version\n|| | 2.1 of the License.\n|| |\n|| | This library is distributed in the hope that it will be useful,\n|| | but WITHOUT ANY WARRANTY; without even the implied warranty of\n|| | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n|| | Lesser General Public License for more details.\n|| |\n|| | You should have received a copy of the GNU Lesser General Public\n|| | License along with this library; if not, write to the Free Software\n|| | Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n|| #\n||\n*/\n\n#ifndef KEYPAD_H\n#define KEYPAD_H\n\n#include \"Key.h\"\n\n// bperrybap - Thanks for a well reasoned argument and the following macro(s).\n// See http://arduino.cc/forum/index.php/topic,142041.msg1069480.html#msg1069480\n#ifndef INPUT_PULLUP\n#warning \"Using  pinMode() INPUT_PULLUP AVR emulation\"\n#define INPUT_PULLUP 0x2\n#define pinMode(_pin, _mode) _mypinMode(_pin, _mode)\n#define _mypinMode(_pin, _mode)  \\\ndo {\t\t\t\t\t\t\t \\\n\tif(_mode == INPUT_PULLUP)\t \\\n\t\tpinMode(_pin, INPUT);\t \\\n\t\tdigitalWrite(_pin, 1);\t \\\n\tif(_mode != INPUT_PULLUP)\t \\\n\t\tpinMode(_pin, _mode);\t \\\n}while(0)\n#endif\n\n\n#define OPEN LOW\n#define CLOSED HIGH\n\ntypedef char KeypadEvent;\ntypedef unsigned int uint;\ntypedef unsigned long ulong;\n\n// Made changes according to this post http://arduino.cc/forum/index.php?topic=58337.0\n// by Nick Gammon. Thanks for the input Nick. It actually saved 78 bytes for me. :)\ntypedef struct {\n    byte rows;\n    byte columns;\n} KeypadSize;\n\n#define LIST_MAX 10\t\t// Max number of keys on the active list.\n#define MAPSIZE 10\t\t// MAPSIZE is the number of rows (times 16 columns)\n#define makeKeymap(x) ((char*)x)\n\n\n//class Keypad : public Key, public HAL_obj {\nclass Keypad : public Key {\npublic:\n\n\tKeypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);\n\n\tvirtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }\n\tvirtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }\n\tvirtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }\n\n\tuint bitMap[MAPSIZE];\t// 10 row x 16 column array of bits. Except Due which has 32 columns.\n\tKey key[LIST_MAX];\n\tunsigned long holdTimer;\n\n\tchar getKey();\n\tbool getKeys();\n\tKeyState getState();\n\tvoid begin(char *userKeymap);\n\tbool isPressed(char keyChar);\n\tvoid setDebounceTime(uint);\n\tvoid setHoldTime(uint);\n\tvoid addEventListener(void (*listener)(char));\n\tint findInList(char keyChar);\n\tint findInList(int keyCode);\n\tchar waitForKey();\n\tbool keyStateChanged();\n\tbyte numKeys();\n\nprivate:\n\tunsigned long startTime;\n\tchar *keymap;\n    byte *rowPins;\n    byte *columnPins;\n\tKeypadSize sizeKpd;\n\tuint debounceTime;\n\tuint holdTime;\n\tbool single_key;\n\n\tvoid scanKeys();\n\tbool updateList();\n\tvoid nextKeyState(byte n, boolean button);\n\tvoid transitionTo(byte n, KeyState nextState);\n\tvoid (*keypadEventListener)(char);\n};\n\n#endif\n\n/*\n|| @changelog\n|| | 3.1 2013-01-15 - Mark Stanley     : Fixed missing RELEASED & IDLE status when using a single key.\n|| | 3.0 2012-07-12 - Mark Stanley     : Made library multi-keypress by default. (Backwards compatible)\n|| | 3.0 2012-07-12 - Mark Stanley     : Modified pin functions to support Keypad_I2C\n|| | 3.0 2012-07-12 - Stanley & Young  : Removed static variables. Fix for multiple keypad objects.\n|| | 3.0 2012-07-12 - Mark Stanley     : Fixed bug that caused shorted pins when pressing multiple keys.\n|| | 2.0 2011-12-29 - Mark Stanley     : Added waitForKey().\n|| | 2.0 2011-12-23 - Mark Stanley     : Added the public function keyStateChanged().\n|| | 2.0 2011-12-23 - Mark Stanley     : Added the private function scanKeys().\n|| | 2.0 2011-12-23 - Mark Stanley     : Moved the Finite State Machine into the function getKeyState().\n|| | 2.0 2011-12-23 - Mark Stanley     : Removed the member variable lastUdate. Not needed after rewrite.\n|| | 1.8 2011-11-21 - Mark Stanley     : Added test to determine which header file to compile,\n|| |                                          WProgram.h or Arduino.h.\n|| | 1.8 2009-07-08 - Alexander Brevig : No longer uses arrays\n|| | 1.7 2009-06-18 - Alexander Brevig : This library is a Finite State Machine every time a state changes\n|| |                                          the keypadEventListener will trigger, if set\n|| | 1.7 2009-06-18 - Alexander Brevig : Added setDebounceTime setHoldTime specifies the amount of\n|| |                                          microseconds before a HOLD state triggers\n|| | 1.7 2009-06-18 - Alexander Brevig : Added transitionTo\n|| | 1.6 2009-06-15 - Alexander Brevig : Added getState() and state variable\n|| | 1.5 2009-05-19 - Alexander Brevig : Added setHoldTime()\n|| | 1.4 2009-05-15 - Alexander Brevig : Added addEventListener\n|| | 1.3 2009-05-12 - Alexander Brevig : Added lastUdate, in order to do simple debouncing\n|| | 1.2 2009-05-09 - Alexander Brevig : Changed getKey()\n|| | 1.1 2009-04-28 - Alexander Brevig : Modified API, and made variables private\n|| | 1.0 2007-XX-XX - Mark Stanley : Initial Release\n|| #\n*/\n"}]},K={onLoad:function(e,t){var _=this;_.__workerSetupInstance||(_.__workerSetupInstance=_.workerSetup({app:e}).then(function(){_.worker.remote.runExtension("onLoad",t.id)}))},onUnload:function(){this.__workerSetupInstance=null,this.worker.remote.runExtension("onUnload"),this.worker.dispose()},onConnect:function(e,t){this.worker.remote.runExtension("onConnect",t.id)},onDisconnect:function(e,t){this.worker.remote.runExtension("onDisconnect",t.id)},onStopAll:function(e,t){this.worker.remote.runExtension("onStopAll",t.id)},beforeChangeUploadMode:function(e,t){return this.worker.remote.runExtension("beforeChangeUploadMode",t.id)},beforeChangeDebugMode:function(e,t){return this.worker.remote.runExtension("beforeChangeDebugMode",t.id)},afterChangeUploadMode:function(e,t){this.worker.remote.runExtension("afterChangeUploadMode",t.id)},afterChangeDebugMode:function(e,t){this.worker.remote.runExtension("afterChangeDebugMode",t.id)},onSelect:function(e,t){var _=this;return this.worker?void this.worker.remote.runExtension("onSelect",t.id):void setTimeout(function(){_.onSelect(e,t)},200)},onUnselect:function(e,t){this.worker.remote.runExtension("onUnselect",t.id)},beforeCodeUpload:function(e,t){this.worker.remote.runExtension("beforeCodeUpload",t.id)},afterCodeUpload:function(e,t){this.worker.remote.runExtension("afterCodeUpload",t.id)},onRead:function(e,t){this.worker.remote.runExtension("onRead",t.id)}},L=function(){function e(){var t=this;o(this,e),this.checkFirmwareInForce="undefined"!=typeof checkFirmwareInForce&&checkFirmwareInForce;var _=window.MbApi.getExtResPath("ext_keypadfr/handlerProxy.js","ext_keypadfr"),n=this;n.workerSetup=function(){var e=a(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,window.__web_worker_rpc.create(_,t).then(function(e){return e.CONFIG.TIMEOUT=42e3,e.CONFIG.HEARTBEAT=4200,e.onFail=function(){n.worker=null,n.workerSetup(t);var e=t.app;e&&e.workspace.resetEvents()},e});case 2:n.worker=e.sent;case 3:case"end":return e.stop();}},e)}));return function(){return e.apply(this,arguments)}}(),this.funcs={BLOCK_1682531530376:{onRun:function a(e,_,o,n){return t.worker.remote.runBlock("BLOCK_1682531530376","onRun",o.id,{id:n.id,opcode:n.opcode,arguments:n.arguments},Object.assign({},e))}},BLOCK_1682531926651:{onRun:function a(e,_,o,n){return t.worker.remote.runBlock("BLOCK_1682531926651","onRun",o.id,{id:n.id,opcode:n.opcode,arguments:n.arguments},Object.assign({},e))}},BLOCK_1682531968675:{onRun:function a(e,_,o,n){return t.worker.remote.runBlock("BLOCK_1682531968675","onRun",o.id,{id:n.id,opcode:n.opcode,arguments:n.arguments},Object.assign({},e))},onMonitor:function n(e,_,o){t.worker.remote.runBlock("BLOCK_1682531968675","onMonitor",_.id,{id:o.id,opcode:o.opcode,arguments:o.arguments})}}}}return _(e,[{key:"getInfo",value:function e(){return{id:"ext_keypadfr",targets:[{name:"arduino_lala",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_leonardo",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_mega",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_mega2560",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_mega_mechatronics",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_micro",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_nano",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_nano_old",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_rich",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_chao",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_goco",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_goco_blynk",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_lcd_dht11_ir_relay_sheild",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_mechatronics",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_omrs",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_uno_r3",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"arduino_yun",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"rp_arduino_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}},{name:"thd_arduino_uno",options:{upload:{middlewares:[{name:"arduino",params:{sources:c.arduino}}]}}}],codeTypes:["arduinoc"],version:"0.0.1",platform:["mblockpc","mblockweb"],categories:[{name:"cate_15c32fb2",colors:["#7ED321","#71BE1E","#65A91A"],menuIconURI:window.MbApi.getExtResPath("ext_keypadfr/imgs/01417b31dd6e459c896572194968b06d.svg","ext_keypadfr"),blockIcon:{type:"image",width:28,height:26,src:window.MbApi.getExtResPath("ext_keypadfr/imgs/6c79e23836f445e8a35418fbee1512b2.svg","ext_keypadfr")},blocks:[{opcode:"BLOCK_1682531530376",blockType:"command",checkboxInFlyout:!1,gap:12,arguments:{row1:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},row2:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},row3:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},row4:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},col1:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},col2:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},col3:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"},col4:{type:"fieldMenu",defaultValue:"0",menu:"BLOCK_1682531530376_ROW1"}},branchCount:0,codes:{arduinoc:{sections:{include:["\"Keypad-3.1.1/src/Key.h\"","\"Keypad-3.1.1/src/Keypad.h\""]}}},handler:this.funcs.BLOCK_1682531530376},{opcode:"BLOCK_1682531926651",blockType:"command",checkboxInFlyout:!1,gap:12,arguments:{toRead:{type:"number",defaultValue:1}},branchCount:0,handler:this.funcs.BLOCK_1682531926651},{opcode:"BLOCK_1682531968675",blockType:"string",checkboxInFlyout:!1,gap:12,arguments:{},branchCount:0,handler:this.funcs.BLOCK_1682531968675}],menus:{BLOCK_1682531530376_ROW1:[{text:"BLOCK_1682531530376_ROW1_0",value:"0"},{text:"BLOCK_1682531530376_ROW1_1",value:"1"},{text:"BLOCK_1682531530376_ROW1_2",value:"2"},{text:"BLOCK_1682531530376_ROW1_3",value:"3"},{text:"BLOCK_1682531530376_ROW1_4",value:"4"},{text:"BLOCK_1682531530376_ROW1_5",value:"5"},{text:"BLOCK_1682531530376_ROW1_6",value:"6"},{text:"BLOCK_1682531530376_ROW1_7",value:"7"},{text:"BLOCK_1682531530376_ROW1_8",value:"8"},{text:"BLOCK_1682531530376_ROW1_9",value:"9"},{text:"BLOCK_1682531530376_ROW1_10",value:"10"},{text:"BLOCK_1682531530376_ROW1_11",value:"11"},{text:"BLOCK_1682531530376_ROW1_12",value:"12"},{text:"BLOCK_1682531530376_ROW1_13",value:"13"},{text:"BLOCK_1682531530376_ROW1_14",value:"14"},{text:"BLOCK_1682531530376_ROW1_15",value:"15"},{text:"BLOCK_1682531530376_ROW1_16",value:"16"},{text:"BLOCK_1682531530376_ROW1_17",value:"17"},{text:"BLOCK_1682531530376_ROW1_18",value:"18"},{text:"BLOCK_1682531530376_ROW1_19",value:"19"}]}}],generators:l,translationMap:d,snippets:O,generatorStartBlocks:[],feature:["worker"]}}},{key:"getHandler",value:function e(){return"object"===i(K)?K:"function"==typeof K?new K:void 0}}]),e}();e.default=L});